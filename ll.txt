111111111111111111111findstringcode11122222222
	String a=input1.toLowerCase();  String g="";
		
  String[] b= a.split(" ");
		
	int c=b.length;
		for(int i=0;i<c;i++){
			int e=0;
	 int d=b[i].length();
			if(d%2==0){
			for(int j=0;j<d/2;j++){
				e+=Math.abs((b[i].charAt(j)-96)-(b[i].charAt(d-(j+1))-96));
			     }
				g+=e;
			     }
		else{
			for(int j=0;j<d/2;j++){
				e+=Math.abs((b[i].charAt(j)-96)-(b[i].charAt(d-(j+1))-96));
			     }
			   e+=b[j].CharAt(d/2)-96;
				g+=e;
		} 
		}
		return Integer.parseInt(g);
	   
	}
}




222222222222222222getcodethroughstring22222222222222222222222

	public int getCodeThroughStrings(String input1){
		// Read only region end
		int k=0, sum=0, r=0;
		String[] word=input1.split("\\s");
		for(int i=0;i<word.length;i++)
		{
			k+=word[i].length();
		}
		while(k>0)
		{
			r=k%10;
			sum+=r;
			k=k/10;
		}
		return sum;
	}
}
3333333333333333333cyclicordersums333333333333333333333
int s=0;
		int a=0;
		int b=0;
		int t=0;
		int l=(int)(Math.log10(input1)+1);
		for(int i=1; i<=l; i++){
			s=input1%10;
			input1=input1/10;
			a=(a*10)+s;
		}
		for(int k=1; k<=l; k++){
			int a1=a;
				int s1=0;
		for(int j=1; j<=l; j++){
		
			b=a1%10;
			s1=s1+b;
			a1=a1/10;
		}
			a=a/10;
			t=t+s1;
			
		}
		return t;
	}
}

8888888888888888encoadedarray8888888888888888
  int[] bahu=new int[input2];
		
	for(int i=input2-1;i>=0;i--){
		if(i==input2-1){
			bahu[i]=input1[i];
		         }
	else{
		bahu[i]=((input1[i])-bahu[i+1]);
	     }
	        }
		int b=bahu[0]; int b1=0;
		for(int j=0;j<=input2-1;j++){
			b1+=bahu[j];
		}
	  Result ka=new Result(b,b1);
		return ka;
	}
    }
88888888888898decreasing sequence99898989898898989
 int c=1;
			int c1=0;
			int m=0;
			for(int i=0; i<input2-1; i++){
			
				if(input1[i]>input1[i+1]){
					c++;
				}
				else{
					if(c>1){
					c1++;
						if(m<c){
							m=c;
						}
							c=1;
					}
				}
			}
			if(c>1){
					c1++;
						if(m<c){
							m=c;
						}
						
					}
			Result res = new Result(c1,m);
			return res;
	        
oooooooooooooooooooooooooidentifyPossibleWordsoooooooooooooooooooooooooooooooooooo

	public String identifyPossibleWords(String input1,String input2){
		// Read only region end
		String output="";
		String v=input1.toUpperCase();
		String p=input2.toUpperCase();
		int b=v.indexOf('_');
		
		//String[] k=v.split("_");
		String[] s=p.split(":");
		for(int i=0;i<s.length;i++)
		{
		if(v.substring(0,b).equals(s[i].substring(0,b))&&v.substring(b+1).equals(s[i].substring(b+1)))
			{
				output+=":"+s[i];
			}
		}
		if(output.equals(""))
		{
		output=" ERROR-009";
		}
		return output.substring(1);
	}
}



777777777777777777777777777777biginteger7777777777777777777777777
int sum=0; int carry=0; StringBuffer a= new StringBuffer(); 
	if(input1.length()>input2.length()){
		input2=String.format("%"+input1.length()+"s",input2).replace(" ","0");
	        }	
      if(input1.length()<input2.length()){
		input1=String.format("%"+input2.length()+"s",input1).replace(" ","0");
	        }
	for(int i=input2.length()-1;i>=0;i--){ 
		sum=0;
		sum+=(Integer.parseInt(""+input1.charAt(i))+Integer.parseInt(""+input2.charAt(i)))+carry;
		a.append(sum%10);
		carry=sum/10;
			}
		if(carry!=0){
			a.append(carry);
		}
	   String result= new String(a.reverse());
		return result;
	}
}
iiiiiiiiiiiiiiiiiiiiiiiiiiencoadedthreestringsiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
    public Result encodeThreeStrings(String input1,String input2,String input3){
    	// Read only region end
        String front=null;
		String middle=null;
		String end=null;
		String front1=null;
		String middle1=null;
		String end1=null;
		String front2=null;
		String middle2=null;
		String end2=null;
		int i=input1.length();
		int j=input2.length();
		int k=input3.length();
		if(i%3==0)
	   {int s0=i/3;
		  front=input1.substring(0,s0);
		   middle=input1.substring(s0,2*s0);
		   end=input1.substring(2*s0);
		  	   }
		else if(i%3==1)
	
		{
			int z=(i-1)/3;
			front=input1.substring(0,z);
			middle=input1.substring(z,(z*2)+1);
			end=input1.substring((z*2)+1);
		}
		else if(i%3==2)
		{int s=(i+1)/3;
			front=input1.substring(0,s);
			middle=input1.substring(s,(s*2)-1);
			end=input1.substring((s*2)-1);
		}
				if(j%3==0)
	   {int s1=j/3;
		  front1=input2.substring(0,s1);
		   middle1=input2.substring(s1,2*s1);
		   end1=input2.substring(2*s1);
		  	   }
		else if(j%3==1)
	
		{
			int f=(j-1)/3;
			front1=input2.substring(0,f);
			middle1=input2.substring(f,(f*2)+1);
			end1=input2.substring((f*2)+1);
		}
		else if(j%3==2)
		{int p=(j+1)/3;
			front1=input2.substring(0,p);
			middle1=input2.substring(p,(p*2)-1);
			end1=input2.substring((p*2)-1);
		}
				if(k%3==0)
	   {int s2=k/3;
		  front2=input3.substring(0,s2);
		   middle2=input3.substring(s2,2*s2);
		   end2=input3.substring(2*s2);
		  	   }
		else if(k%3==1)
		{
			int x=(k-1)/3;
			front2=input3.substring(0,x);
			middle2=input3.substring(x,(x*2)+1);
			end2=input3.substring((x*2)+1);
		}
		else if(k%3==2)
		{int y=(k+1)/3;
			front2=input3.substring(0,y);
			middle2=input3.substring(y,(y*2)-1);
			end2=input3.substring((y*2)-1);
		}
		String m=front+front1+front2;
			String n=middle+middle1+middle2;
			String o=(end+end1+end2);
		char[] ch=o.toCharArray();
		String vc="";
		for(int c=0;c<ch.length;c++)
		{
		char cc=ch[c];
			if(Character.isUpperCase(cc))
			{
				vc+=Character.toLowerCase(cc);
			}
			else if(Character.isLowerCase(cc))
			{
				vc+=Character.toUpperCase(cc);
			}}
			 
		Result rs=new Result(m, n, vc);
		return rs;
		}
	}
			
			
555555555555555sumOfPowerOfDigits55555555555555555
	public int sumOfPowerOfDigits(int input1){
		// Read only region end
		int sum=0, b=0, rem;
		while(input1>0)
		{
			rem=input1%10;
			int a=(int)Math.pow(rem,b);
			sum=sum+a;
			b=rem;
			input1=input1/10;
			
		}
		return sum;
	}
}




*******************************************************************************
import java.util.Scanner;

public class firstRepetetiveElement {

	public static void main(String[] args){
		// TODO Auto-generated method stub
int k, j = 0;

		Scanner reader=new Scanner(System.in);
System.out.println("Enter no. of elements");
int input2=reader.nextInt();
int[] input1=new int[input2];
System.out.println("Enter array Elements");
		for(int i=0;i<input2;i++)
		{
			input1[i]=reader.nextInt();
		}
int[] count=new int[input2];
for(int i=0;i<input2;i++)
{
	k=input1[i];
	if(k<=0)
	{
		System.out.println(0);
		break;
	}
	else
	{
	count[k]=count[k]+1;
	j=count[k];
	if(j>1)
	{
		System.out.println(k);
		break;
	}
}
	}
}
	}



*********************************************************
import java.util.Arrays;
import java.util.Scanner;

public class nonPrimeSumDifference {

	public static void main(String[] args) {
		int count = 0, flag = 0, sum = 0, first = 0;
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter no. of elements");
		int input2 = reader.nextInt();
		int[] input1 = new int[input2];
		System.out.println("Enter array Elements");
		for (int i = 0; i < input2; i++) {
			input1[i] = reader.nextInt();
		}
		for (int i = 0; i < input2; i++) {
			if (input1[i] <= 0) {
				count = 1;

				System.out.println(0);
			}
		}
		Arrays.sort(input1);
		if (count == 0) {
			for (int i = input2-1; i >=0; i--) {
				if (input1[i] != 1) {
					for (int k = 2; k < input1[i]; k++) {

						if (input1[i] % k == 0) {
							flag = 1;
						}
					}
					if (flag != 0) {
						first = i;
						sum = sum + input1[i];
						//System.out.println(input1[i]);
					}
					flag = 0;
				}
			}
				System.out.println(sum - input1[first]);

			}
		}
	}


***************************************************************************

import java.util.Arrays;
import java.util.Scanner;

public class primeSumDifference {
	public static void main(String[] args) {
		int count = 0, flag = 0, sum = 0, first = 0;
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter no. of elements");
		int input2 = reader.nextInt();
		int[] input1 = new int[input2];
		System.out.println("Enter array Elements");
		for (int i = 0; i < input2; i++) {
			input1[i] = reader.nextInt();
		}
		for (int i = 0; i < input2; i++) {
			if (input1[i] <= 0) {
				count = 1;

				System.out.println(0);
			}
		}
		Arrays.sort(input1);
		if (count == 0) {
			for (int i = input2-1; i >=0; i--) {
				if (input1[i] != 1) {
					for (int k = 2; k < input1[i]; k++) {

						if (input1[i] % k == 0) {
							flag = 1;
						}
					}
					if (flag == 0) {
						first = i;
						sum = sum + input1[i];
						//System.out.println(input1[i]);
					}
					flag = 0;
				}
			}
				System.out.println(sum - input1[first]);

			}
		}
	}



***************************************************************************************
import java.util.Scanner;

public class sumNonPrimeIndex {

	public static void main(String[] args) {
		int flag = 0, sum = 0, count = 0;
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter no. of elements");
		int input2 = reader.nextInt();
		int[] input1 = new int[input2];
		System.out.println("Enter array Elements");
		for (int i = 0; i < input2; i++) {
			input1[i] = reader.nextInt();
		}
		for (int i = 0; i < input2; i++) {
			if (input1[i] <= 0) {
				count = 1;

				System.out.println(0);
			}
		}
		if (count == 0) {
			for (int i = 2; i < input2; i++) {
				for (int k = 2; k < i; k++) {
					if (i % k == 0) {
						flag++;
					}
				}
				if (flag > 0) {
					sum += input1[i];
				}
				flag = 0;
			}
			System.out.println(sum);
		}
	}
}






****************************************************************************

import java.util.Scanner;

public class sumPrimeIndex {
	public static void main(String[] args) {
		int flag = 0, sum = 0, count = 0;
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter no. of elements");
		int input2 = reader.nextInt();
		int[] input1 = new int[input2];
		System.out.println("Enter array Elements");
		for (int i = 0; i < input2; i++) {
			input1[i] = reader.nextInt();
		}
		for (int i = 0; i < input2; i++) {
			if (input1[i] <= 0) {
				count = 1;

				System.out.println(0);
			}
		}
		if (count == 0) {
			for (int i = 2; i < input2; i++) {
				for (int k = 2; k < i; k++) {
					if (i % k == 0) {
						flag = 1;
					}
				}
				if (flag == 0) {
					sum += input1[i];
				}
				flag = 0;

			}
			System.out.println(sum);
		}
	}
}



****************************************************************************

siri 1 sum-min prime  sum-max prime sum-min no.

package javaa;

import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.Collections;//important to fin min nd max number
class GFG
{
	public static void main (String[] args)
	{
		int arr[]={2,3,4,5,6,7,8,9,10,12,17,23};
        int size= arr.length;
        List a1=new ArrayList(); //using ArrayList to store prime numbers
        
        int i=0,sum=0;
        
        int smallest=arr[0];
        for(i=0;i<size;i++){
           if (arr[i] < smallest)
                smallest = arr[i];
        }
         System.out.println("smallest number is: " +smallest);
       for (i = 0; i < size; i++) 
       {
            boolean isPrime = true;
            if (arr[i] == 1)
                isPrime = false;
            else 
            {
                // check to see if the numbers are prime
                for (int j = 2; j <= arr[i] / 2; j++)
                {
                    if (arr[i] % j == 0)
                    {
                        isPrime = false;
                        break;
                    }
                }
            }
            // print the number
            if (isPrime)
            {
               /* for(int j=0;j<=i;j++)
                {
                prime[j]=arr[i];
                }*/
                //System.out.println(arr[i] + " is a prime number in the array ");
                sum=sum+arr[i];
                a1.add(arr[i]);
            }    
            }System.out.println("list of prime numbers : " + a1);
         System.out.println("sum of prime numbers: " +sum);
         int max = (Integer) Collections.max(a1); //Collections.max() is an object..we're converting into integer format 
         int min = (Integer) Collections.min(a1);
         int a= sum-smallest;
         int b=sum-max;
         int c=sum-min;
         System.out.println("sum-smallest in array: " +a);
         System.out.println("sum-max prime: " +b);
         System.out.println("sum-min prime:" +c);  } }


*****************************************************************************

siri sum of no.s in primeindex  sum-min no. (non prime indices n sum)...


package javaa;
import java.io.*;
class PrimeNumbers
{
   public static void main (String[] args)
   {
       int arr[]={2,3,4,5,6,7,8,9,5,6,3};
       int size= arr.length;
       int sum=0;
       int i =0;
      int num =0;
        int[] primeNumbers=new int[size];      //array to store prime values
        for (i = 0; i < size; i++)   // ..      
       { 		  	  
            int counter=0; 	  
            for(num =i; num>=1; num--)
	        {
                 if(i%num==0)
	            {
 		            counter = counter + 1;
	            }
	        }                                //to find prime index
	          if (counter ==2)
	        {
	            for(int j=0 ;j<size; j++)
	            {
	                                       //Assigning the Primeindex  number to array String
	            primeNumbers[j]= arr[i];
	            } 
	         System.out.println( primeNumbers[i]);// printing the array
	         sum=sum+primeNumbers[i];
            }
	        }
        System.out.println("sum of numbers" +sum);
        
        int smallest=arr[0];// finding small numb in original aray
        for(i=0;i<size;i++)
        {
        if (arr[i] < smallest)
                smallest = arr[i];
        }
        System.out.println("smallest number is" +smallest);
        int c=sum-smallest;
        System.out.println("case2: " +c);
        } }



******************************gapmaxmin**************************************

public class hydlp4 {
	public static void main(String[] args) {
		
int num[] = { 5,5, 6, 2, 3,4, 6,6, 2, 4, 8,6 };
		
int max = 0;
		
int min = 9;
		
int i = 0, j = 0, flag = 0;
		
int len = num.length;
		
int p = 0;
		
int count[] = new int[len];
		
for (i = 0; i < len; i++) {
			
for (j = i; j < len - 1; j++) {
				
if (num[i] == num[j + 1]) {
					
count[p] = j - i;
					
flag = 1;
				
}
			}
			
if (flag == 1) {
				
p++;
			}
			
flag = 0;
		}
		
for (i = 0; i < p - 1; i++) {
			
if (count[i] > max) {
				
max = count[i];
			
}
		}
		
for (i = 0; i < p - 1; i++) {
			
if (count[i] < min) {
				
min = count[i];
		
	}
		}
		
System.out.println(max + "    " + min);
	
}
}

*****************************************************************************
sudhr gap 
package javaa;

import java.util.*;
public class Gap {
public static void main(String[] args) {
	int a[]={2,1,2,3,4,5,6,0,2,5,1,5,6,5};int gapMax=0,dif=0;int gapMin=a.length;
	for(int i=0;i<a.length-1;i++)
	{
		for(int j=i+1;j<a.length;j++)
		{
			if(a[i]==a[j])
			{
				dif=j-i;
				System.out.println(dif+" = dif");
			}
			if(dif>0 && dif>gapMax)
			{
				gapMax=dif-1;
			}
			if(dif>0 && dif<gapMin)
			{
				gapMin=dif-1;
			}
		}
	}
	System.out.println(gapMax+" = gapMax");
	System.out.println(gapMin+" = gapMin");
}
} 


*****************************************************************************

sravani frst

#include<stdio.h>

#include<stdlib.h>

#include<limits.h>

int isprime(int n)
{
    
if (n <= 1)
        
return 0;
    
if (n <= 3)
       
 return 1;
    
if (n%2 == 0 || n%3 == 0)
  
      return 0;
   


 for (int i=5; i*i<=n; i=i+6)
     
   if (n%i == 0 || n%(i+2) == 0)
         
   return 0;
    

    return 1;
}


int main(void)
{
  
  int length;
   
 printf("enter the length");
 
   scanf("%d",&length);
    
int *arr=(int*)malloc(sizeof (int)*length);
   
 printf("enter the elements");
    
for(int index=0;index<length;index++)
    {
    
    scanf("%d",&arr[index]);
        
    }
  
  int min_prime=INT_MAX,max_prime=INT_MIN,sum=0,min=INT_MAX;
   
 
    for(int index=0;index<length;index++)
    {
      
  if(isprime(arr[index]))
        {
        
    if(arr[index]<min_prime)
          
      min_prime=arr[index];
          
  if(arr[index]<max_prime)
     
           max_prime=arr[index];
         

   
        }
        else
        {
 
          
 
            if(min<arr[index])
   
    
     {
                min=arr[index];
   
         }
        }
        sum+=arr[index];

    }
    printf("enter the case:");
    
int option;
    scanf("%d",&option);
    
switch(option)
    {
        
case 1:printf("%d",sum-min_prime);
     
       break;
       
 case 2:printf("%d",sum-max_prime);
        
    break;
        
case 3:printf("%d",sum-min);
      
      break;
     }
    
return 0;
}





***********************************************************************
sravani 2nd

#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
int isprime(int n)
{
    if (n <= 1)  
        return 0;
    if (n <= 3) 
        return 1;
    if (n%2 == 0 || n%3 == 0) 
        return 0;
    for (int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
            return 0;
    
    return 1;
}
int main(void)
{
    int length;
    printf("enter the length");
    scanf("%d",&length);
    int *arr=(int*)malloc(sizeof (int)*length);
    printf("enter the elements");
    for(int index=0;index<length;index++)
    {
        scanf("%d",&arr[index]);
        
    }
    int prime_sum=0,non_prime_sum=0,min=INT_MAX;
    
    for(int index=0;index<length;index++)
    {
        if(isprime(index))
        {
            prime_sum+=arr[index];
        }
        else
        {
            non_prime_sum+=arr[index];
            
        }
        if(min>arr[index])
        {
            min=arr[index];
            
        }
    }
    printf("enter the case:");
    int option;
    scanf("%d",&option);
    switch(option)
    {
        case 1:printf("%d",prime_sum);
            break;
        case 2:printf("%d",non_prime_sum);
            break;
        case 3:printf("%d",min);
            break;
                
    }
    return 0;
}






